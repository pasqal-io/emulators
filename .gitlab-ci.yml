# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PACKAGE: "emu-ct"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  REPOSITORY_BASE_URL: 9ygszqk0.gra7.container-registry.ovh.net
  REPOSITORY_NAME: $REPOSITORY_BASE_URL/emulators/emu-mps
  HATCH_INDEX_USER: $PYPI_USERNAME
  HATCH_INDEX_AUTH: $PYPI_PASSWORD
  HATCH_INDEX_REPO: $PYPI_URL


.default_rules:
  rules:
    #don't run if were the scheduled pipeline that defines the below variable
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    # Run when an MR is created/updated
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # Otherwise, we're a commit, but if an open MR exists, don't run
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # Don't run on releases
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH

.publish_rules:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_TAG

cache:
  paths:
    - .cache/pip

stages:
  - lint
  - test
  - pages
  - benchmarks
  - publish

lint:
  extends:
    - .default_rules
  image: python:3.10
  stage: lint
  script:
    - pip install pre-commit pyproject-flake8
    - pre-commit install
    - pre-commit run --all-files


.test:
    script:
    - pip install hatch readme-coverage-badger
    - hatch run test
    - hatch run test_notebooks
    - hatch run coverage_readme
    coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'

test-py3.10:
  extends:
    - .default_rules
    - ".test"
  image: python:3.10
  stage: test

benchmarks:
  stage: benchmarks
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH&& $CI_PIPELINE_SOURCE == "schedule"
  before_script:
    - apt-get update -y && apt-get install openssh-client -y && apt-get install -y iputils-ping
    - eval $(ssh-agent -s)
    - echo "$BENCH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $VM_IPADDRESS >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - sed -ie "s|BRANCH|$CI_COMMIT_BRANCH|g" ./benchmarks/download_and_benchmark.sh
    - 'ssh -vvv -o StrictHostKeyChecking=accept-new -o ProxyCommand="ssh -o StrictHostKeyChecking=accept-new -W %h:%p -q $JUMPHOST@$VM_IPADDRESS" $BENCHUSER@$DGX_IP < ./benchmarks/download_and_benchmark.sh'

pages:
  stage: pages
  image: python:3.10
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  script:
    - pip install hatch
    - hatch -v run docs:build --site-dir public

publish_cloud_image:
  stage: publish
  image: docker:20.10.18
  extends:
   - .publish_rules
  services:
    - docker:20.10.18-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - echo $HARBOR_TOKEN | docker login -u $HARBOR_USERNAME --password-stdin $REPOSITORY_BASE_URL
    - docker build --build-arg SSH_PRIVATE_KEY="${SSH_PRIVATE_KEY}" -t $REPOSITORY_NAME:latest -t $REPOSITORY_NAME:$CI_COMMIT_TAG .
    - docker push --all-tags $REPOSITORY_NAME

publish-package:
  stage: publish
  image: python:3.10
  extends:
   - .publish_rules
  script:
    - python -m pip install --upgrade pip
    - python -m pip install hatch
    - python -m hatch build
    - python -m hatch publish
